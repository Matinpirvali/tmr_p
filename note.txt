# add image to app
from PIL import Image

my_image = customtkinter.CTkImage(light_image=Image.open("<path to light mode image>"),
                                  dark_image=Image.open("<path to dark mode image>"),
                                  size=(30, 30))

button = customtkinter.CTkButton(app, image=my_image)

#



import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# دانلود داده‌های ضروری
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('stopwords')

# تعریف توابع پردازش زبان طبیعی
def preprocess_text(text):
    # توکن‌بندی متن
    tokens = word_tokenize(text.lower())
    
    # حذف کلمات پرتکرار
    stop_words = set(stopwords.words('english'))
    tokens = [token for token in tokens if token not in stop_words]
    
    # لماتیزاسیون
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(token) for token in tokens]
    
    return ' '.join(tokens)

# تعریف داده‌های آموزشی
training_data = [
    "نظریه عمومی نسبی این است که جرم و انرژی فضا و زمان را انعطاف‌پذیر می‌کند.",
    "نظریه داروین درباره تکامل و انتخاب طبیعی می‌باشد.",
    "نظریه کوانتومی به تفسیر رفتار میکروسکوپی ذرات می‌پردازد."
]

# پیش‌پردازش داده‌های آموزشی
preprocessed_training_data = [preprocess_text(data) for data in training_data]

# استخراج ویژگی‌ها با استفاده از TF-IDF
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(preprocessed_training_data)

# مثالی از اجرای بات
while True:
    user_question = input("سوال خود را مطرح کنید: ")
    
    # پیش‌پردازش سوال کاربر
    preprocessed_question = preprocess_text(user_question)
    
    # استخراج ویژگی‌های سوال کاربر با استفاده از TF-IDF
    tfidf_question = vectorizer.transform([preprocessed_question])
    
    # محاسبه شباهت کیسنی بین سوال کاربر و داده‌های آموزشی
    similarity_scores = cosine_similarity(tfidf_question, tfidf_matrix)[0]
    
    # پیدا کردن داده‌های آموزشی با بیشترین شباهت
    max_similarity_index = similarity_scores.argmax()
    
    # نمایش پاسخ
    if similarity_scores[max_similarity_index] > 0:
        answer = training_data[max_similarity_index]
        print("پاسخ: " + answer)
    else:
        print("متأسفم، نمی‌توانم به این سوال پاسخ دهم.")

# SCIENCE V2 #
def science(scarf):
    roles = {
        "هشتم-شش-انگلیسی-صفحه-96": "نقش شما رضا هست(Reza)",
        "هشتم-پنج-انگلیسی-صفحه-82": "نقش شما مهسا هست(Mahsa)",
        "هشتم-چهار-انگلیسی-صفحه-64": "شما نقش پدرام را دارید (Pedram)",
        "هشتم-سه-انگلیسی-صفحه-50": "نقش شما نسرین هست(Nasrin)",
        "هشتم-دو-انگلیسی-صفحه-30": "نقش شما رکپشن هست(Receptionist)",
        "هشتم-یک-انگلیسی-صفحه-18": "نقش شما احمد هست(Ahmad)",
        "هفتم-شش-انگلیسی-صفحه-96": "نقش شما افشین هست(Afshin)",
        "هفتم-پنج-انگلیسی-صفحه-82": "نقش شما علی هست(Ali)",
        "هفتم-چهار-انگلیسی-صفحه-64": "نقش شما ابوالفضل هست(Abolfazl)",
        "هفتم-سه-انگلیسی-صفحه-50": "شما نقش سهیلا را دارید(Sohila)",
        "هفتم-دو-انگلیسی-صفحه-30": "شما نقش مریم را دارید(Maryam)",
        "هفتم-یک-انگلیسی-صفحه-18": "شما نقش محمد را دارید(Mohammad)"
    }
    
    for condition, answer in roles.items():
        if all(word in scarf for word in condition.split("-")):
            return answer

    return "هیچ نقشی برای شما تعیین نشده است."


## ----Calling C Functions from Python---- ##
To call C functions from Python on Windows, you can use the `ctypes` module, which provides a way to create C-compatible data types and call functions in dynamic link libraries/shared libraries. Here's a step-by-step guide to help you get started:

1. Write your C code and compile it into a dynamic link library (DLL). Let's assume you have a C function called `add_numbers` that adds two integers and returns the result. Save the following code in a file named `mylibrary.c`:

```c
#include <stdio.h>

__declspec(dllexport) int add_numbers(int a, int b) {
    return a + b;
}
```

To compile the C code into a DLL on Windows, you can use the following command in the command prompt:

```bash
gcc -shared -o mylibrary.dll mylibrary.c
```

Make sure you have GCC installed and added to your system's PATH environment variable.

2. Create a Python script to load and use the C function. Save the following code in a file named `main.py`:

```python
import ctypes

# Load the DLL
mylib = ctypes.CDLL('mylibrary.dll')

# Define the argument and return types of the function
mylib.add_numbers.argtypes = (ctypes.c_int, ctypes.c_int)
mylib.add_numbers.restype = ctypes.c_int

# Call the C function
result = mylib.add_numbers(3, 4)
print("Result:", result)
```

3. Run the Python script. Make sure the DLL file (`mylibrary.dll`) is in the same directory as your Python script, or provide the full path to the DLL file in the `ctypes.CDLL()` function call.

When you run the Python script, it should load the DLL, call the `add_numbers` function with the arguments `(3, 4)`, and print the result, which should be `7`.

That's it! You have successfully called a C function from Python on Windows using `ctypes`.
